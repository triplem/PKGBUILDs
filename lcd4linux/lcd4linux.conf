#  $Id: lcd4linux.conf.sample 1194 2013-02-13 15:15:34Z volker $
#  $URL: https://ssl.bulix.org/svn/lcd4linux/trunk/lcd4linux.conf.sample $

Display XWindow {
    Driver 'X11'
    Size   '120x32'
    Font   '5x8'
    Pixel  '4+1'
    Gap    '-1x-1'
    Border 20
    Buttons 2
    Foreground  '000000cc'
    Background  '00000022'
    Basecolor   '80d000'
    Bordercolor '90e000'
}

Display Image {
    Driver 'Image'
#   Format 'PPM'
    Format 'PNG'
    Size   '120x32'
    Font   '6x8'
    Pixel  '4+1'
    Gap    '-1x-1'
    Border 20
#   Foreground '#000000'
#   Background '#80d000'
#   Halfground '#70c000'
    Foreground '000000cc'
    Background '00000022'
    Basecolor  '80d000'
}

Display VNC {
    Driver       'VNC'
    Font         '6x8'
    Port         '5900'
    Xres         '320'
    Yres         '140'
    Bpp          '4'
    Maxclients   '2'
    Buttons      '4'
    Keypadxofs   '40'
    Keypadyofs   '70'
    Keypadygap   '10'
    Keypadcol    '8745877'
    Osd_showtime '2000'
#    Password     'password'
    Maxfps       '25'
#    HttpDir	 '/path/to/classfiles'
    HttpPort	 '5800'
}

Plugin MPD {
    enabled 1
    server '192.168.0.162'
    port 6600

    minUpdateTime 500
}

Widget CPU {
    class  'Text'
    expression  uname('machine')
    prefix 'CPU '
    width  10
    align  'L'
    style test::onoff(7)>0?'bold':'norm'
    update tick
}

Widget CPUinfo {
    class  'Text'
    expression  cpuinfo('model name')
    prefix ''
    width  20
    align  'M'
    speed 100
    update tick
}

Widget RAM {
    class  'Text'
    expression meminfo('MemTotal')/1024
    postfix ' MB RAM'
    width  11
    precision 0
    align  'R'
    update tick
}

Widget Busy {
    class 'Text'
    expression proc_stat::cpu('busy', 500)
    prefix 'Busy'
    postfix '%'
    width 9
    precision 1
    align 'R'
    update tick
}

Widget BusyBar {
    class 'Bar'
    expression  proc_stat::cpu('busy',   500)
    expression2 proc_stat::cpu('system', 500)
    length 10
    direction 'E'
    update tack
}

Widget Load {
    class 'Text'
    expression loadavg(1)
    prefix 'Load'
    postfix loadavg(1)>1.0?'!':' '
    width 10
    precision 1
    align 'R'
    update tick
}

Widget LoadBar {
    class 'Bar'
    expression  loadavg(1)
    max 2.0
    length 10
    direction 'E'
    update tack
}

Widget Disk {
    class 'Text'
    # disk.[rw]blk return blocks, we assume a blocksize of 512
    # to get the number in kB/s we would do blk*512/1024, which is blk/2
    # expression (proc_stat::disk('.*', 'rblk', 500)+proc_stat::disk('.*', 'wblk', 500))/2
    # with kernel 2.6, disk_io disappeared from /proc/stat but moved to /proc/diskstat
    # therefore you have to use another function called 'diskstats':
    expression diskstats('hd.', 'read_sectors', 500) + diskstats('hd.', 'write_sectors', 500)
    prefix 'disk'
    postfix ' '
    width 10
    precision 0
    align 'R'
    update tick
}

Widget DiskBar {
    class 'Bar'
    #expression  proc_stat::disk('.*', 'rblk', 500)
    #expression2 proc_stat::disk('.*', 'wblk', 500)
    # for kernel 2.6:
    expression  diskstats('hd.', 'read_sectors',  500)
    expression2 diskstats('hd.', 'write_sectors', 500)
    length 14
    direction 'E'
    update tack
}

Widget Eth0 {
    class 'Text'
    expression (netdev('eth0', 'Rx_bytes', 500)+netdev('eth0', 'Tx_bytes', 500))/1024
    prefix 'eth0'
    postfix ' '
    width 10
    precision 0
    align 'R'
    update tick
}

Widget Eth0Bar {
    class 'Bar'
    expression  netdev('eth0', 'Rx_bytes', 500)
    expression2 netdev('eth0', 'Tx_bytes', 500)
    length 14
    direction 'E'
    update tack
}

Widget Uptime {
    class 'Text'
    expression uptime('%d days %H:%M:%S')
    width 20
    align 'R'
    prefix 'Up '
    update 1000
}

Widget BarTest {
    class 'Bar'
    # test::bar(barno,maxval,startval,delta) - move a test value between 0 and max.
    # delta= step to change value by each time it's read.
    # barno - ten different test bar values can be set up, with barno=0..9
    # if delta=0, just returns the value of bar n instead of changing it.
    expression test::bar(0,30,25,1)
    expression2 test::bar(1,30,0,1)
    length 8
    # max 50
    direction 'E'
    update 10
}

Widget BarTestVal {
    class 'Text'
    expression test::bar(0,100,50,0)
    prefix 'Test '
    width 9
    update 200
}

Widget ImageTest {
    class 'Image'
    file 'tux.png'
    update 1000
    visible 1
    inverted 0
}

#
# Adopted config for athene
#
Display dpf {
    Driver     'DPF'
    Port       'usb0'
    Font       '12x16'
    Foreground 'ffffff'
    Background '000000'
    Basecolor  '000066'
}


#
# common system information
#
Widget Time {
    class 'Text'
    expression strftime('%d.%m.%Y %H:%M',time())
    width 16
    align 'C'
    stlye 'bold'
    update 60000
}

Widget MachineName {
    class  'Text'
    expression  uname('nodename')
    width  35
    align  'L'
    update tick
}

#
# mpd widgets
#
Widget MpdArtist {
    class 'Text'
    expression mpd::artist()
    width 25
    align 'A'
    speed scroller
    update tick
}

Widget MpdAlbum {
    class 'Text'
    expression mpd::album()
    width 25
    align 'A'
    speed scroller
    update tick
}

Widget MpdTitle {
    class 'Text'
    expression mpd::title()
    width 25
    align 'A'
    speed scroller
    update tick
}

Widget MpdPlayerstatus {
    class 'Text'
    expression (mpd::getStateInt() == 1 ? 'PLAYING' : '').(mpd::getStateInt() == 2 ? 'PAUSED ' : '').(mpd::getStateInt() == 3 ? 'STOPPED' : '').(mpd::getStateInt() == 0 ? 'UNKNOWN' : '')
    width 7
    align 'L'
    update tack
}

Widget smallMP3Bar_part1 {
    class 'Bar'
    expression mpd::elapsedTimeSec()
    length 23
    min 0
    max mpd::totalTimeSec()
    direction 'E'
    style 'H'
    update tack
}

Widget smallMP3Bar_part2 {
    class  'Text'
    expression mpd::formatTimeMMSS( mpd::elapsedTimeSec() ).'/'.mpd::formatTimeMMSS( mpd::totalTimeSec() )
    width  20
    update tack
    align  'L'
}

Layout MPD {
    Row1 {
    }
    Row2 {
        Col2 'Time'
    }
    Row3 {
        Col2 'Machinename'
    }
    Row5 {
        Col2 'MpdArtist'
    }
    Row6 {
        Col2 'MpdAlbum'
    }
    Row7 {
        Col2 'MpdTitle'
    }
    Row8 {

    }
    Row9 {
        Col2 'MpdPlayerstatus'
    }
    Row10 {

    }
    Row11 {
        Col2 'smallMP3Bar_part1'
    }
    Row12 {

    }
    Row10 {
        Col2 'smallMP3Bar_part2'
    }

}

Display 'dpf'

Layout 'MPD'

Variables {
   tick 500
   tack 100
   scroller 300
   minute 60000
}
